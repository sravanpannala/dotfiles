#!/usr/bin/env python3

import argparse
import subprocess


def parse_function():
    parser = argparse.ArgumentParser(
        description="Function to mount a device for chroot"
    )
    parser.add_argument(
        "--device",
        "-d",
        required=True,
        help="Device name to mount, ex: sda, mmcblk1, nvme0n1",
    )
    parser.add_argument(
        "--filesystem",
        "-f",
        default="ext4",
        choices=["ext4", "btrfs"],
        help="Filesystem on the device ext4 or btrfs",
    )
    parser.add_argument(
        "--bootloader",
        "-b",
        default="BIOS",
        choices=["BIOS", "UEFI"],
        help="Boot partition type BIOS or UEFI",
    )

    args = parser.parse_args()

    devs = ["sd", "mmcblk", "nvme", "loop"]
    if all(x not in args.device for x in devs):
        parser.error("Enter correct device name")

    return parser, args


def main():
    parser, args = parse_function()
    print("Argument values:")
    print("/dev/" + args.device)
    print(args.filesystem)
    print(args.bootloader)

    dev = "/dev/" + args.device
    if "sd" not in args.device:
        dev = dev + "p"
    dev1 = dev + "1"
    dev2 = dev + "2"
    print(dev2)

    subprocess.call(["mkdir", "-p", "MP"])

    if args.filesystem == "ext4":
        subprocess.call(["mount", dev2, "MP"])
    elif args.filesystem == "btrfs":
        mtptt = ["", "/home", "/var/log", "/var/cache"]
        mtpts = ["MP" + x for x in mtptt]
        subvt = ["@", "@home", "@log", "@cache"]
        subvs = ["subvol=" + x for x in subvt]
        for i, (mtpt, subv) in enumerate(zip(mtpts, subvs)):
            subprocess.call(["mount", dev2, mtpt, "-o", subv])

    if args.bootloader == "UEFI":
        boot_dir = "MP/boot/efi"
    else:
        boot_dir = "MP/boot"
    subprocess.call(["mount", dev1, boot_dir])


if __name__ == "__main__":
    main()
